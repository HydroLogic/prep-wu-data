--
-- Here we join against mapping table to pull out follower counts. Generate
-- a flat table consisting of followers vs scaled rank.
--
REGISTER <%= pig_home %>/contrib/piggybank/java/piggybank.jar;


twitter_user_id  = LOAD '<%= twitter_user_id %>' AS (rsrc:chararray, <%= TwitterUserId.to_pig %>);       
rank             = LOAD '<%= pagerank %>'        AS (user_id:long, pr:float, list:chararray); -- load everything

rank_c   = FOREACH rank GENERATE user_id, pr;                    -- trim list off
mapping  = FOREACH twitter_user_id  GENERATE user_id, followers_count;             -- keep followers around for %-ile ranking
joined   = JOIN rank BY user_id, mapping BY user_id; 
rank_fol = FOREACH joined GENERATE
             rank::user_id      AS user_id,
             mapping::followers_count AS followers_count,
             rank::pr           AS pr
           ;

rank_g   = GROUP rank_fol ALL;
rank_m   = FOREACH rank_g GENERATE FLATTEN(rank_fol), MAX(rank_fol.pr) AS max_pr;
rank_out = FOREACH rank_m {
             -- scale rank to range from [0..10]
             scaled = 10.0f*( (float)org.apache.pig.piggybank.evaluation.math.LOG(rank_fol::pr + 1.0f) / (float)org.apache.pig.piggybank.evaluation.math.LOG(max_pr + 1.0f) );
             GENERATE
               rank_fol::user_id   AS user_id,
               rank_fol::followers_count AS followers_count,
               scaled              AS scaled
             ;
           };

STORE rank_out INTO '<%= outputs.first %>';
