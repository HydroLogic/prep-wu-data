<% registers.each do |jar| %>
register <%= jar %>;
<% end %>

data       = LOAD '<%= twuid_table %>' USING com.infochimps.hbase.pig.HBaseStorage('info:screen_name', '-loadKey') AS (user_id:int, screen_name:chararray);
tweet_noid = LOAD '<%= data %>' AS (rsrc:chararray,tweet_id:long,created_at:long,user_id:long,screen_name:chararray,search_id:long,in_reply_to_user_id:long,in_reply_to_screen_name:chararray,in_reply_to_search_id:long,in_reply_to_status_id:long,text:chararray,source:chararray,lang:chararray,lat:float,lng:float,retweeted_count:int,rt_of_user_id:long,rt_of_screen_name:chararray,rt_of_tweet_id:long,contributors:chararray);

first_pass = JOIN data BY screen_name, tweet_noid BY screen_name;
fixed_ids  = FOREACH first_pass GENERATE
               (data::user_id IS NULL ? 'tweet-noid' : 'tweet') AS rsrc,
               tweet_noid::tweet_id                AS tweet_id,
               tweet_noid::created_at              AS created_at,
               data::user_id                       AS user_id,
               tweet_noid::screen_name             AS screen_name,
               tweet_noid::search_id               AS search_id,
               tweet_noid::in_reply_to_user_id     AS in_reply_to_user_id,
               tweet_noid::in_reply_to_screen_name AS in_reply_to_screen_name,
               tweet_noid::in_reply_to_search_id   AS in_reply_to_search_id,
               tweet_noid::text                    AS text,
               tweet_noid::source                  AS source,
               tweet_noid::lang                    AS lang,
               tweet_noid::lat                     AS lat,
               tweet_noid::lng                     AS lng,
               tweet_noid::retweeted_count         AS retweeted_count,
               tweet_noid::rt_of_user_id           AS rt_of_user_id,
               tweet_noid::rt_of_screen_name       AS rt_of_screen_name,
               tweet_noid::rt_of_tweet_id          AS rt_of_tweet_id,
               tweet_noid::contributors            AS contributors        
             ;

SPLIT fixed_ids INTO noids IF rsrc == 'tweet-noid', rectified IF rsrc == 'tweet';

not_replies = FILTER rectified BY in_reply_to_screen_name IS NULL; -- these are good to go


replies     = FILTER rectified BY in_reply_to_screen_name IS NOT NULL;
joined      = JOIN data BY screen_name, replies BY in_reply_to_screen_name;
rectified   = FOREACH joined GENERATE
                replies::rsrc                    AS rsrc,
                replies::tweet_id                AS tweet_id,
                replies::created_at              AS created_at,
                replies::user_id                 AS user_id,
                replies::screen_name             AS screen_name,
                replies::search_id               AS search_id,
                data::user_id                    AS in_reply_to_user_id,
                replies::in_reply_to_screen_name AS in_reply_to_screen_name,
                replies::in_reply_to_search_id   AS in_reply_to_search_id,
                replies::text                    AS text,
                replies::source                  AS source,
                replies::lang                    AS lang,
                replies::lat                     AS lat,
                replies::lng                     AS lng,
                replies::retweeted_count         AS retweeted_count,
                replies::rt_of_user_id           AS rt_of_user_id,
                replies::rt_of_screen_name       AS rt_of_screen_name,
                replies::rt_of_tweet_id          AS rt_of_tweet_id,
                replies::contributors           AS contributors        
              ;

SPLIT rectified INTO no_reply_id IF in_reply_to_user_id IS NULL, with_reply_id IF in_reply_to_user_id IS NOT NULL;

good_tweets = UNION not_replies, with_reply_id;
STORE good_tweets INTO '<%= hdfs %>/<%= out %>';
