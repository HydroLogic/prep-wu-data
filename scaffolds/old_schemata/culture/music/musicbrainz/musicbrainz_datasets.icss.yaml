--- # !infochimps.org/^icss
contributors:
  - name:         'MusicBrainz'
    url:          'http://musicbrainz.org/doc/DatabaseDownload'
    role:         'distributed'
    desc:         |
        h2. The MusicBrainz project

        MusicBrainz
        
        * is a user-maintained community music metadatabase:
            
          MusicBrainz provides a catalog of music metadata such as the
          artist name, the release title, and the list of tracks that appear
          on a release. Since 2005, users have the option to further relate
          each of these entities using a detailed set of relationships
          (i.e. who played which instrument on a release/track). MusicBrainz
          only provides the data about the music and not the music
          itself. MusicBrainz does not condone copyright infringement and
          thus cannot help you find the best place to illegally download
          copyrighted works. Learn more about MusicBrainz...

        * provides solutions to identifiy and label digital music files:
            
          The MusicBrainz products for identifying and labelling digital
          music files are the MusicBrainzTagger, iEatBrainz, and the
          PicardTagger -- Windows, MacOS X, and Python applications that use
          AcousticFingerprints (TRMs and PUIDs) to semi-automatically
          identify tracks in your music collection and then write consistent
          and accurate metadata to your music files.
        
  - name:         'MusicBrainz Developers'
    url:          'http://musicbrainz.org/doc/Development'
    desc:         |
        "Development":http://musicbrainz.org/doc/Development
        
  - name:         'MusicBrainz community'
    url:          'http://musicbrainz.org/doc/HelpWanted'
    desc:         |
        Many, many MusicBrainz users contributed information.

        Please see
        * "HowToContribute,":http://musicbrainz.org/doc/HowToContribute
        * "HelpWanted":http://musicbrainz.org/doc/HelpWanted
        * "CorporateSponsors":http://musicbrainz.org/doc/CorporateSponsors

        and following for more information on their contributions.
  
datasets:
  - name:               ''
    is:collection:      true
    tags:               ''
    credits:
      - url:          'http://musicbrainz.org/doc/Development'
        role:         'gathered'       
      - url:          'http://musicbrainz.org/doc/HelpWanted'
        role:         'gathered'
        

    license_info:
        handle:         'CC-BY-NC-SA'
        desc:
            The data collected by the MusicBrainz project is made available to
            the public under open licenses. Some of the data is available under
            the Public Domain, and some under the Creative Commons
            Attribution-NonCommercial-ShareAlike license (See
            "MusicBrainzLicense":http://musicbrainz.org/doc/MusicBrainzLicense
            for more details).

            h2. "Public Domain Data":http://creativecommons.org/licenses/publicdomain/

            !http://creativecommons.org/images/public/norights-a.gif!:http://creativecommons.org/licenses/publicdomain/
            
            The core data of the MusicBrainz dataset is placed into the "Public
            Domain":http://creativecommons.org/licenses/publicdomain/ , which
            means that anyone can download and use the core data in any way they
            see fit. No restictions, no worries! The core data consists of the
            following pieces of data. The SQL tablenames are shown in
            parenthesis after the description of the data:

            * "Artists":http://musicbrainz.org/doc/Artists and "ArtistAlias":http://musicbrainz.org/doc/ArtistAlias (artist, artistalias)
            * "Releases":http://musicbrainz.org/doc/Releases (album, albumjoin)
            * "Tracks":http://musicbrainz.org/doc/Tracks (track)
            * "Labels":http://musicbrainz.org/doc/Labels and "LabelAlias":http://musicbrainz.org/doc/LabelAlias (label, labelalias)
            * "DiscID":http://musicbrainz.org/doc/DiscID (CD Identification) information (album_cdtoc and cdtoc)
            * "PUID":http://musicbrainz.org/doc/PUID Identifiers and related data (puid, puidjoin, clientversion)
            * "TRM":http://musicbrainz.org/doc/TRM Identifiers and related data (trm, trmjoin, clientversion)
            * "ReleaseEvents":http://musicbrainz.org/doc/ReleaseEvents (release, country)
            * "AdvancedRelationships":http://musicbrainz.org/doc/AdvancedRelationships (lt_*, l_*, link_attribute, link_attribute_type)

            The "LiveDataFeed":http://musicbrainz.org/doc/LiveDataFeed that we
            offer to replicate the MusicBrainz data is a slight exception to the
            rules above, since both Public Domain data and Creative Commons data
            (see below) are intermingled in the data update packets. Given that
            the highest common license denominator needs to be applied to these
            data packets, the Creative Commons license governs the live
            data-feeds.

            To get the freely available Public Domain data, please download a data
            snapshot from the "DatabaseDownload":http://musicbrainz.org/doc/DatabaseDownload page.

            h2. "Creative Commons Licensed Data":http://creativecommons.org/licenses/by-nc-sa/2.0/

            !http://i.creativecommons.org/l/by-nc-sa/2.0/88x31.png!:http://creativecommons.org/licenses/by-nc-sa/2.0/

            The remaining portions of the MusicBrainz data are released under
            the Creative Commons [WWW] Attribution-NonCommercial-ShareAlike 2.0
            license. This allows non commercial use of the MusicBrainz data as
            long as MusicBrainz is given credit and that derivative works (works
            based on MusicBrainz CC licensed data) are also made available under
            the same license. For more information on the Creative Commons and
            their licenses, please refer to the "Creative
            Commons":http://creativecommons.org/ home page.

            The Creative Commons licensed data portions are: (The SQL tablenames
            are shown in parenthesis after the description of the data)

                * "Release":http://musicbrainz.org/doc/Release metadata tables (album_amazon_asin, albummeta)
                * "Search":http://musicbrainz.org/doc/Search indexes (wordlist, artistwords, albumwords, trackwords, labelwords)
                * "Annotations":http://musicbrainz.org/doc/Annotations (annotation)
                * "Statistics":http://musicbrainz.org/doc/Statistics (currentstat, historicalstat, stats, puidjoin_stat, puid_stat, trmjoin_stat, trm_stat)
                * "Edits":http://musicbrainz.org/doc/Edits (automod_election, moderation_note_open, moderation_open, moderator, vote_open)
                * Closed edits (moderation_closed, moderation_note_closed, vote_closed)
                * Artist relationships (Similar artists, not "AdvancedRelationships":http://musicbrainz.org/doc/AdvancedRelationships) (artist_relation) (Data provided by [WWW] Agent Arts)
                * "LiveDataFeed":http://musicbrainz.org/doc/LiveDataFeed -- please see "LiveDataFeed":http://musicbrainz.org/doc/LiveDataFeed for more details on our continuous update stream.

            To get the Creative Commons licensed data, please download a data snapshot from the "DatabaseDownload":http://musicbrainz.org/doc/DatabaseDownload page. 
            
    
    links:
        - name:         MusicBrainz database server
          type:         raw_data
          url:          ftp.musicbrainz.org/pub/musicbrainz/data/fullexport
          desc:         |
              The files in this directory are snapshots of the MusicBrainz database,
              in a format suitable for import into a PostgreSQL database. To import
              them, you need a compatible version of the MusicBrainz server software.

              Use the following command for checking out the mb_server revision
              which created the snapshots:

              <code>
              svn co http://svn.musicbrainz.org/mb_server/branches/RELEASE_20071014-BRANCH mb_server
              </code>

              (Substitute the date of the release you download in that command.)

              After that, follow the instructions given in mb_server/INSTALL.
        
    # fields in datasets schema        
                    
            
      - name:       Philip (flip) Kromer
        url:        http://infochimps.org/users/flip
        role:       converted

    ratings:
        accurate:       { rating: 2, by: 'initial', desc: 'These files have not been checked for conversion errors.' }
        authoritative:  { rating: 2, by: 'initial', desc: 'These files have not been checked for conversion errors.' }
        comprehensive:  { rating: 2, by: 'initial', desc: 'These files have not been checked for conversion errors.' }
        interesting:    { rating: 2, by: 'initial', desc: 'These files have not been checked for conversion errors.' }        

    
    notes:
        # desc:         in dataset schema
        
        collection_description: |
            h2. The MusicBrainz project

            MusicBrainz
            
            * is a user-maintained community music metadatabase:
                
              MusicBrainz provides a catalog of music metadata such as the
              artist name, the release title, and the list of tracks that appear
              on a release. Since 2005, users have the option to further relate
              each of these entities using a detailed set of relationships
              (i.e. who played which instrument on a release/track). MusicBrainz
              only provides the data about the music and not the music
              itself. MusicBrainz does not condone copyright infringement and
              thus cannot help you find the best place to illegally download
              copyrighted works. Learn more about MusicBrainz...

            * provides solutions to identifiy and label digital music files:
                
              The MusicBrainz products for identifying and labelling digital
              music files are the MusicBrainzTagger, iEatBrainz, and the
              PicardTagger -- Windows, MacOS X, and Python applications that use
              AcousticFingerprints (TRMs and PUIDs) to semi-automatically
              identify tracks in your music collection and then write consistent
              and accurate metadata to your music files.

        collection_schema:    |

            This document describes the database structure of the MusicBrainz
            database, as of the Subversion copy at 20th August 2003. It is not
            meant to be a complete definition or any kind of definitive
            reference - it is just a series of pictures with some narrative,
            intended to be helpful to people trying to understand the overall
            form of the database. Also the diagrams were not produced
            automatically or anything - they were done by hand, so many contain
            errors. Please be forgiving if this is the case.
            
            h2. This document is partially outdated

            !!! This document does not describe the current state of the
            MusicBrainz database, but is a snapshot of how it looked like in mid
            2003. In the meantime AdvancedRelationships were introduced and many
            other small but substantial changes. Please check the images against
            the up-to-date [WWW] CreateTables.sql script. The other scripts in
            the [WWW] sql directory give more details about index, foreign key,
            and serial number management workings of the MusicBrainz
            Server. Please be advised that you'll need to understand the
            fundamentals of SQL before these scripts will make sense to you.
            Future plans
            
            Note also the near-future "ObjectModel":http://musicbrainz.org/doc/ObjectModel
            schema migrations.

            We also used to attempt to document our future plans for the
            database. But, as it is typical in software engineering, our
            implementations never matched our speculations about how we thought
            we'd do things in the future. In order to get a gimpse of what we
            are working on the for the future, take a look a the MusicBrainz
            Development page which describes the CurrentWork being done on
            MusicBrainz. There is a page on how a NextGenerationSchema could
            look like, and an ObjectModel that goes with it. It is not clear at
            this time (05/2006) if, and when these changes get implemented.
            
            The Whole Database in Miniature

            Firstly let's just take a quick look at the whole database, in all its glory, all twenty-five tables of it:

            !http://musicbrainz.org/doc/database-20030820-small.png!:http://wiki.musicbrainz.org/DatabaseSchema/FullSize
            
            h2. Detailed descriptions

            See the descriptions for each component dataset:

                * Artists
                * Releases
                * Tracks
                * TRMs
                * Search tables
                * Editors or (Users)
                * The editing subsystem
                * Statistics
            
        usage:           |
            
            **Please see http://musicbrainz.org/doc/Database for recent information.**

            h2. The MusicBrainz "Artist":http://musicbrainz.org/doc/Artist data includes:

            *  A MusicBrainz ID ("MBID":http://musicbrainz.org/doc/MBID)
            *  Name
            *  Sortname for displaying the artist name in a sorted list
            *  Common aliases and misspellings
            *  Type (person/group)
            *  Begin date, a birth date or formation date, depending on type
            *  End date, a death date or dissolution date, depending on type
            *  Comment, a short disambiguation field that distinguishes artists with same or similar names
            *  Annotation, a free form text field that allows editors to make notes about the artist

            h2. The MusicBrainz "Release":http://musicbrainz.org/doc/Release data includes:

            *  A MusicBrainz ID (MBID)
            *  Title
            *  Artist
            *  Type (Album, single, EP, compilation, soundtrack, spokenword, interview, audiobook, live, remix, other)
            *  Status (Official, promotion, bootleg, pseudo-release)
            *  Language (see "ISO 639":http://www.loc.gov/standards/iso639-2/php/code_list.php)
            *  Annotation, a free form text field that allows editors to make notes about this release
            *  Discid (zero or more Discids that allow Audio CD-ROM identification)
            *  Amazon ASIN, an Amazon.com product code, suitable for linking to cover art.
            *  Release events that each contain:
            ** Release date
            ** Release country
            ** Label
            ** Catalog number
            ** Barcode (EAN/UPC)
            ** Format (CD, Tape, Vinyl, Wax Cylinder, etc.)

            h2. The MusicBrainz "Track":http://musicbrainz.org/doc/Track data includes:

            *  A MusicBrainz ID (MBID)
            *  Title
            *  Artist
            *  Duration (in milliseconds)
            *  Annotation, a free form text field that allows editors to make notes about this
            *  PUID, the [WWW] MusicIP acoustic fingerprint identifier for this track.

            h2. The MusicBrainz "Label":http://musicbrainz.org/doc/Label data includes:

            *  A MusicBrainz ID (MBID)
            *  Name
            *  Sortname for displaying the label name is a sorted list
            *  Common aliases and misspellings
            *  Type (original production, bootleg production, reissue production, distributor, holding)
            *  Code, the IFPI "LabelCode":http://musicbrainz.org/doc/LabelCode
            *  Begin date (formation date)
            *  End date (dissolution date)
            *  Comment, a short disambiguation field that distinguishes labels with same or similar names
            *  Annotation, a free form text field that allows editors to make notes about the label
            *  Country ("ISO 3166 Codes":http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm)

            Each of these "Artist":http://musicbrainz.org/doc/Artist,
            "Release":http://musicbrainz.org/doc/Release,
            "Track":http://musicbrainz.org/doc/Track and
            "Label":http://musicbrainz.org/doc/Label entities can be linked by
            "AdvancedRelationships":http://musicbrainz.org/doc/AdvancedRelationships
            that provide a rich tapestry of data relationships. Advanced
            relationships provide information about web resources
            (e.g. Wikipedia pages, download locations, etc) for entities and
            they can indicate instrument/vocal performances on a piece of
            music. These relationships allow
            "MusicBrainz":http://musicbrainz.org/doc/MusicBrainz to capture most
            of the data contained in the liner and liner notes for an Audio
            CD. For more details on these relationships, please read our
            AdvancedRelationships page.
            
            h2. Download

            The MusicBrainz database is built on the [WWW] Postgres relational
            database engine. Therefore the data files are provided in the
            Postgres "dump" format, only really suitable for restoring to a
            Postgres database. See the
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema
            documentation for a description of the schema, and what each of the
            tables are used for.

            *  see the "DatabaseDownload":http://musicbrainz.org/doc/DatabaseDownload page for instructions on how to download the dumps.

            h2. License
            
            "__see below__":#rights
            
            h2. Installation

            There are a few contributed guidelines how to setup the database on
            different systems. See DatabaseSetup for the list of available
            documents. The easiest way to get a running database is to install a
            VirtualMusicBrainzServer.

            
    # formats:  [] # added by packager
    # fileinfo: [] # added by packager
    # dnload_count
        
  - name:               'Music Artists'
    tags:               >-
        musician artist band group symphony

    is_collection:      false
    notes:
        desc:           |
            Dump of the Musicbrainz.org "artist" database
            
        usage_overview:
            An artist is generally a musician, group of musicians, a
            collaboration of multiple musicians or other music professional
            contributing to the works described in the MusicBrainzDatabase.  As
            the MusicBrainz project evolves, so does the definition of "artist",
            so that now the artist table is used to hold everything up to music
            industry lawyers (see MiscellaneousProductionRelationshipType). In
            general, however, artists are people who sing or play instruments.

            There are various examples of unusual artists documented under
            ArtistName.  See also the list of FictitiousArtist``s (which are
            also considered valid, separate artists in MusicBrainz) and
            SpecialPurposeArtist``s.

            == Information about artists stored in the database ==

            Of course, the most interesting thing about any artist is which
            ["Release"]s they've made.  Each release has a ReleaseArtist and
            ["Track"]s with TrackArtist's.

            These fields are stored directly in each artist's record:
            (see "fields":#fields for more information.)

             *  ["ArtistID"]: this is the MusicBrainz UUID of the artist (not editable)
             *  ArtistName: the name of the artist
             *  ArtistAlias: alternate names for the artist, including possible typos
             *  ArtistSortName: alternate form of the name used in search results
             *  ArtistComment: field to distinguish between identically named artists
             *  ArtistAnnotation: general information about the artist that may be of interest to other users
             *  ArtistType: used to distinguish between individuals and groups
             *  ArtistBeginDate: This is interpreted differently for bands and individuals.  For bands, it's the date of formation; for artists, it's the date of birth.
             *  ArtistEndDate: This is interpreted differently for bands and individuals.  For bands, it's the breakup date; for artists, it's the date of death.

            Many other kinds of information can be represented using "AdvancedRelationships":http://musicbrainz.org/doc/AdvancedRelationships.  See "AdvancedRelationshipType":http://musicbrainz.org/doc/AdvancedRelationshipType``s for more information.
            
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).


            attachment:artists.png

            * Each [:Artist:artist] has one row in the '''artist''' table.
              There are two "special" artists: the [:VariousArtists:Various
              Artists] artist (id =
              [http://bugs.musicbrainz.org/browser/mb_server/trunk/cgi-bin/ModDefs.pm
              ModDefs]::VARTIST_ID), which is used to represent a release where
              the [:ReleaseArtist:release artist] is different than one or more
              of the track artists (see ReleaseArtistStyle), and the "Deleted
              Artist" (id =
              [http://bugs.musicbrainz.org/browser/mb_server/trunk/cgi-bin/ModDefs.pm
              ModDefs]::DARTIST_ID), which is used to maintain referential
              integrity when an artist is deleted (all the relations that
              pointed to the deleted artists are moved to the "deleted artist").

            * '''artistalias''' stores one row for each entered alias (most
              artists don't have aliases).  Each alias references a particular
              artist.
            
            * '''artist_relation''' stores a one to many related artists
              (''not'' AdvancedRelationships), but how similar these artists are
              to the current artist. This data is provided by
              [http://www.agentarts.com Agent Arts].
            

        fields:
            name: 'Fields in this table'
            desc:
                * ArtistName:       the name of the artist
                * ArtistID:         unique identifier for this artist
                * ArtistAlias:      alternate names for the artist, including possible typos
                * ArtistSortName:   alternate form of the name used in search results
                * ArtistComment:    field to distinguish between identically named artists
                * ArtistAnnotation: general information about the artist that may be of interest to other users
                * ArtistType:       used to distinguish between individuals and groups
                * ArtistBeginDate:  This is interpreted differently for bands and individuals. For bands, it\'s the date of formation; for artists, it\'s the date of birth.
                * ArtistEndDate:    This is interpreted differently for bands and individuals. For bands, it\'s the breakup date; for artists, it\'s the date of death.

        
  - name:               Music Release (Album, Single, etc.)
    is_collection:        true
    tags:               >-
        album lp cd release single artwork
        
    notes:
        usage_overview:           |
            
            In MusicBrainzTerminology, a release is an entry in the album table
            of the database. For CDs, a release represents 1 CD. For vinyl and
            cassettes, a release represents both sides of a record or cassette.


            A release has a ReleaseTitle and consists of one or more
            Tracks. Each release has one ReleaseArtist who is the PrimaryArtist
            associated with that release. Other artists can be associated with a
            release using AdvancedRelationships.

            A release has a ReleaseID, a unique identifier for that Release.
            
            h3. Examples

            * 1 CD (album): [http://musicbrainz.org/showalbum.html?albumid=59381 Desire]
            * 1 CD (single): [http://musicbrainz.org/showalbum.html?albumid=181703 Creep]
            * CD 1 of a double album: [http://musicbrainz.org/release/a4864e94-6d75-4ade-bc93-0dabf3521453.html The Fragile (disc 1: Left)]
            * 2-sided vinyl 12" (single): [http://musicbrainz.org/showalbum.html?albumid=464780 Feel the Music]
            * 2-sided 2-record vinyl LP, disc 2 (album): [http://musicbrainz.org/showalbum.html?albumid=208193 Blonde on Blonde (disc 2)]

        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).

            See the [:DatabaseSchema:Database Schema] page for an overview of the [:Database:MusicBrainz Database] and links to pages which describe each parts of the schema in more detail (like this page).

            !http://wiki.musicbrainz.org/DatabaseSchema/Releases?action=AttachFile&do=get&target=releases.png!

             * Each [:Release:release] lives in the '''album''' table, and is attributed to ''a single'' [:ReleaseArtist:release artist].
             
             * For efficiency reasons, a few tidbits of information are kept in
               de-normalised form in the '''albummeta''' table.  The rows in
               this table normally correspond one-to-one with those in the
               '''album''' table - in other words, the "id" used is exactly the
               same as that in the '''album''' table.  If the albummeta row is
               missing, it is re-calculated and inserted the first time it is
               requested by the application. The '''albummeta''' holds
               information like the number of tracks, disc IDs and TRM IDs on
               that release, such that they do not have to be recalculated every
               time from the child tables. This number is recalculated, if any
               of the child element changes (i.e. if a track is added using an
               [:AddTrackEdit:add track edit]).
             
             * ["DiscID"]s are stored in three forms:
                 
             ** the track count, track offsets (track 1 to track 99), and
                leadout figures (where each of them is just an integer)
             
             ** the CD TOC, which is essentially all of the above numbers listed
                listed together in one long string (joined by spaces)
             
             ** the MusicBrainz Disc ID (a 28-character string) [[BR]]
             
                The track count, offsets and leadout are stored in the '''toc'''
                table, the TOC is stored in the '''discid''' table, and the
                28-character disc ID is stored in both the '''discid''' and
                '''toc''' tables.  When a client is requesting release
                information based on a given disc ID, then the matching record
                is found in the '''discid''' table (the '''toc''' table could
                have been used instead, but using the "discid" table is more
                efficient, because it has fewer columns). When we try to find a
                release using a "fuzzy" TOC match, then we look up the data in
                the "toc" table.
               
             * id - unique number that references the release.
             
             * artist - integer that corresponds to the id field in the artist table.
             
             * name - name of the release.
             
             * gid - a [:MusicBrainzIdentifier:MBID] that uniquely identifies
               the release for its whole lifecycle. Currently, the '''MBIDs'''
               of releases that are merged into others are lost, there is a
               pending RFE for this.
             
             * modpending - an integer representing the total number of mods
               pending on the release. This does not including mods pending for
               the individual tracks, only release data.
             
             * attributes - a PostgreSQL array field that holds several integers. Each
               integer has a meaning as specified in [http://bugs.musicbrainz.org/browser/mb_server/trunk/cgi-bin/Album.pm#L46 Album.pm]
             
             * page -
             
             * language - an integer that corresponds to the id field of the language table
             
             * script - an integer that corresponds to the id field of the script table
             
             * modpending_lang - an integer that corresponds to the id field of
               the language table relating to the pending moderations
               
  - name:               'Music Track'
    is_collection:        true
    tags:               ''

    notes:
        usage_overview:           |

            
            Broadly speaking, track represents a particular recording of a song,
            and albumjoin represents the inclusion of that recording on each
            release it appears on.

            A Track is intended represent a specific audio recording of a
            specific musical performance. A particular track is transformed to
            various recorded data formats for distribution to listeners. If an
            artist performs a song and makes a master recording, that is one
            Track. The Track can be transformed to an analogue format on a vinyl
            LP; and a AIFF digital format on a Compact Disc; and an MP3 digital
            format in a computer file; it is still one Track. The MusicBrainz
            concept of Track also represents related entities: e.g., a block of
            data stored on media together with music tracks (DataTrack), or an
            audio recording that is not musical (a spoken word performance).
            
            In MusicBrainzTerminology, a track is an entry in the track table of
            the [:MusicBrainzDatabase:database]. It usually contains a single
            song, but there are tracks with more than one song by the same
            artist, or [:TracksWithMultipleArtists:tracks with more than one
            song by different artists, not collaborating].

            A track is part of a ["Release"] and has a TrackTitle. Each track has a unique ["TrackID"].

            == Examples ==

             * 1 song: [http://musicbrainz.org/showtrack.html?trackid=435002 One More Cup of Coffee (Valley Below)]
             * 2 songs by one artist: [http://musicbrainz.org/showtrack.html?trackid=171315 Parting Ways / Writers Block]
             * 3 songs by one artist: [http://musicbrainz.org/showtrack.html?trackid=665840 Mx / Bong Hit / Damone]
             * 2 songs by different artists (not collaborating): [http://musicbrainz.org/showtrack.html?trackid=590966 Born Slippy (Nuxx) / Fatboy Slim - Right Here Right Now]
             * A full release's worth of songs by one artist: [http://musicbrainz.org/track/ed5ac7c7-bf69-47ec-a30e-2db0d2ef3b4d.html Ain't It Dead Yet?]

            [[Card(Cards/FooterHeader)]]

            == See Also ==
            
            http://wiki.musicbrainz.org/ObjectModel/TrackObject and the
            http://wiki.musicbrainz.org/ObjectModel
                  
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).

            attachment:tracks.png

            * Tracks are held in the '''track''' and '''albumjoin''' tables.
              The design of these tables is as follows (but, as we will see in a
              minute, the full design is not used yet).
             
            * The idea is that a track can appear on several different releases,
              the information that is the same each time (name, artist, ID,
              length) is stored in the '''track''' table. However the
              information that changes for each release (mainly, at which track
              number it appears on the release) is stored in the '''albumjoin'''
              table. Hence broadly speaking, '''track''' represents a particular
              recording of a song, and '''albumjoin''' represents the inclusion
              of that recording on each release it appears on.
             
            * Since both the '''track''' and the '''albumjoin''' table have a
              {{{modpending}}} flag, we'll describe what each of them is for,
              too. The {{{modpending}}} flag on the '''albumjoin''' table is set
              if there is a pending edit which would change the {{{sequence}}}
              column of this track (see EditTrackNumberEdit). The
              {{{modpending}}} flag on the '''track''' table is set on each
              other EditType (see EditTrackNameEdit, EditTrackTimeEdit,
              ChangeTrackArtistEdit)


            <!> So far, however, tracks are not re-used across different releases, so basically for every '''track''' row there is exactly one '''albumjoin''' row.
            
        
  - name:               'Music Labels'
    is_collection:        true
    tags:               

    notes:
        usage_overview:           |
            
            '''Labels''' are one of the most complicated and controversial part
            of the music industry, the main reason for that being the term
            itself is not clearly defined and refers to (at least) two
            overlapping concepts: imprints, and the companies that control
            them. Note, though, that for most (simple cases) labels, the imprint
            and the company controlling it have the same name.

            == What is a Label? ==

            '''Labels''' in MusicBrainz refer mainly to imprints.

            An imprint is (strictly, and nothing more than) a brand (and
            trademark) associated with the marketing of sound recordings (an
            imprint is not a company). An imprint may be marketed as a project,
            unit or division of the company that manages it. Imprints are the
            information you certainly want to add in the database and is the
            information available on sleeves in the form of a label logo
            (a.k.a. imprint). Imprints are labels, as one usually understand
            it. Specifically, you should favor using names as they are
            represented on the imprint, rather than using a company name
            (usually found in "copyright"/"produced" mentions).

            To a lesser extent, a label entity ''may'' be created in the database to represent a record company.

            A record company typically manages imprints, and coordinates the
            ''production / manufacturing / promotion / relations with artist /
            PR / distribution'' of sound recordings. Record companies may
            directly handle one or more of these aspects, or may sign
            contractual agreements with other companies to do the job. In some
            specific cases, you may want to create a label in the database to
            represent such a company name rather than an imprint: usually, such
            a move is required when labels went through complex merge/split
            operations and you need AdvancedRelationship``s to structure the
            imprints list and represent their history in a meaningful
            way. Please note, though, that there is no need to "de-duplicate"
            companies from imprints when their name are very close.

            Lastly, we also store Music groups.

            A music group is a financial holding, whose purpose is '''solely'''
            to control and manage other companies directly involved in the
            production of sound recordings. Like for Record companies, the use
            of Music groups is reserved for specific cases that you will likely
            not encounter unless you're doing some research intensive background
            work on structuring the labels list

            Hence, MusicBrainz '''mostly''' keep track of imprints, and to a
            lesser extent, companies involved into either production or
            distribution, and music groups.

            At that time, we '''don't''' keep track of companies involved in the
            other aspects of the music industry (PR, manufacturing, management,
            ...), and we '''don't''' get into too much financial details, or try
            to represent exactly the socio-economic organization of
            companies. There are three reasons for that:

            * such informations are usually not available from sleeves

            * they are irrelevant to MusicBrainz goal (being a '''music''' database)

            * such a project would be extremely complicated and our current data model is not fit for it

            == Editing Overview ==

            Each label has a number of properties stored directly in each label's record:

            * ["LabelID"]: the !MusicBrainz UUID of the label (not editable)

            * LabelName: the name of the label

            * LabelSortName: the sortname of the label

            * LabelAlias: aliases

            * LabelCode: the code of the label (a.k.a. "LC")

            * LabelBeginDate: this is the creation date of the label entity
              (usually the date at which the imprint was first used, or the
              associated trademark was registered)

            * LabelEndDate: this is the date at which the label stopped existing

            * LabelComment: a field to distinguish between identically named
              labels, or labels with identical LabelCode

            * LabelAnnotation: general information about the label that may be
              of interest and doesn't fit in any other fields

            * LabelCountry: the country of origin of the label

            * LabelType: this field describes the "kind" of production of that label

            Many other informations can be represented using
            AdvancedRelationships. You may read about
            AdvancedRelationshipType``s for informations on all kind of
            relationships, or more specifically check LabelRelationshipClass for
            label centric informations.

            Just like with artists, you can subscribe to a label. See
            LabelSubscription for more information.

            You may additionally consult the ["LabelFAQ"] for some basic
            questions, HowToIdentifyLabels for concrete cases, and HowLabelsWork
            for details about how to perform basic editing.

            == More about labels ==

            The design of the label system has been made bearing in mind one
            main requirement: having a release sleeve as only information source
            must be enough to perform all basic editing.

            That being said, the label macrocosm is a very rich and complex
            world. Editors who want to go beyond basic editing and want to
            learn/document more can take a look at the LabelResource page or dig
            further into the LabelRelationshipClass.
            
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).
            
        
        
- infochimps_schema_segment:
    name:               'Advanced Relationships among Artists, Releases and Tracks'
    is_collection:        true
    tags:               ''

    notes:
        usage_overview:           |
            Advanced Relationships is a way to represent all the "miscellaneous" relationships between ["Artist"]s, ["Release"]s and ["Track"]s that are stored in the MusicBrainzDatabase.  For example:

            * The song
               [http://musicbrainz.org/track/271051c3-1a4c-4612-8c6e-2a5400e37b56.html
               Rockafella Skank] by Fatboy Slim includes a sample from the Just
               Brothers song
               [http://musicbrainz.org/track/0ad2aa31-cf5f-4ef4-93d8-4568d404323b.html
               Sliced Tomato].

            * [http://musicbrainz.org/showrel.html?type=artist&id=46550 Paul
               Di'Anno] was a member of
               [http://musicbrainz.org/showrel.html?type=artist&id=10042 Iron
               Maiden] from 1977 until 1981.

            * The Metallica album
               [http://musicbrainz.org/album/5997cf87-5225-4830-9edf-358638a24905.html
               St. Anger] was produced by
               [http://musicbrainz.org/artist/4f0730d0-fd52-4818-8a5d-f3f69ce8f378.html
               Bob Rock] &
               [http://musicbrainz.org/artist/65f4f0c5-ef9e-490c-aee3-909e7ae6b2ab.html
               Metallica].

            All of this information is stored in a single table in the database,
            and there is a single user interface for adding new information.  In
            this way, MusicBrainz has a fairly simple way to deal with extremely
            complicated data.
            
            "__Taken from MusicBrainz' AdvancedRelationships page__":http://musicbrainz.org/doc/AdvancedRelationships 

            h2. Description

            Each [:AdvancedRelationship:relationship] entered by a user belongs to one AdvancedRelationshipType.  These types define:
                
             *  Which entities will be related (artists, releases, labels, tracks, etc)
             
             *  What AdvancedRelationshipAttribute``s go along with the relationship
             
             *  The LinkPhrase``s of the relationships, which describe how to write the relationship information in English sentences.

            For example, the advanced relationship type "PerformerRelationshipType" can be used to link an artist (for example, [wiki:Artist:618b6900-0618-4f1e-b835-bccb17f84294 Eric Clapton]) to a track on which they performed (for example, [wiki:Track:64d0220a-0587-43c9-b7e3-809e8c06542b Runaway Train]).  The definition of PerformerRelationshipType allows an optional attribute to specify the instrument he played (InstrumentRelationshipAttribute), so you can say if he played guitar.  The definition also says how to construct an English sentence out of this data, so that the website can display the words "Runaway Train ''was performed by'' Eric Clapton".

            These AdvancedRelationshipType``s are themselves simply entries in another database table.  This means that new ones can be defined, old ones deleted, and existing ones modified through a relatively simple user-interface which does not require hacking the database internals.  Since this data is much more important than any other individual entries, editing of AdvancedRelationshipType``s is limited to selected users, called RelationshipEditor``s.  There are more relationship editors than developers, and the process of adding a new relationship type is much simpler than adding a new database table, so this is a very fast way to expand and improve the MusicBrainzDatabase.


            This page lists all available types of AdvancedRelationships and how they are organized in [:AdvancedRelationshipClass:classes] or families. It links to pages that explain the usage of the respective relationship types.

            Note that some of these types might still be proposals, this will be stated on their respective page. There is also some good but slightly historical information about AdvancedRelationshipTypeDevelopment.


            === Looking to add a new relationship type for AR? ===

            Suggested additions or changes to AdvancedRelationshipType``s are listed as ProposedAdvancedRelationshipType``s (formerly AdvancedRelationshipTypeProposal``s) and discussed on the StyleMailingList.

            == Existing Types of Relationships ==

            === Classes ===

            Relationship types are grouped into thematic AdvancedRelationshipClass``es. These are explained here. All types that belong to one class are explained on the class page. There is also a complete list of relationship types further below. 

            * PerformanceRelationshipClass:

              This denotes all artists who played on a specific performance of a
              work. This means that they actually produced some new audio
              material, e.g. who sung or played some instrument. Remixing
              ''existing'' audio material or engineering the audio signal is not
              covered by this class.

            * AlternativeVersionRelationshipClass:

              This describes relationships between related works, e.g. works
              that are the same, remastered from another, a cover from another,
              etc.

            * RemixRelationshipClass:

              This denotes al artistic activity where existing recordings are
              used to create (remix) something new. You can specify who remixed
              what material on what work. This does ''not'' refer to mix
              engineers in studios etc.

            * CompositionRelationshipClass:

              This denotes all artists who created some aspect of the general
              work, i.e. not a specific performance of it but the lyrics, the
              score or the arrangement.

            * ProductionRelationshipClass:

              This denotes all people and institutions that were involved in the
              production on the work, but did not play music: the manager, cover
              designer, audio mix engineer, etc. but ''not'' actual performers
              or remixers.

            * MusicalAssociationRelationshipClass:

              This describes who was a member of which group, who collaborated with whom etc.

            * PersonalAssociationRelationshipClass:

              This describes family relationships and liasons between artists that are in the database anyway.

            * AffiliateRelationshipClass:

              These are links to records in affiliate databases

            * DiscographyRelationshipClass:

              These are links to discographic resources

            * GetMusicRelationshipClass:

              These are links to sites where you can download and/or buy the
              music. Note that these ''must'' be legal, or MusicBrainz will run
              into trouble!

            * OtherDatabasesRelationshipClass:

              These are links to other databases about the artists, the music etc.

            === Families ===

            The following table shows all possible relationship combinations: 

            || || ["Artist"] || ["Release"] || ["Label"] || ["Track"] ||
            || ["Artist"] || ArtistArtistRelationship || - || - || - ||
            || ["Release"] || ReleaseArtistRelationship || ReleaseReleaseRelationship || - || - ||
            || ["Label"] || LabelArtistRelationship || LabelReleaseRelationship || LabelLabelRelationship || - ||
            || ["Track"] || ArtistTrackRelationship || ReleaseTrackRelationship || LabelTrackRelationship || TrackTrackRelationship  ||
            || ["URL"] || ArtistUrlRelationship || ReleaseUrlRelationship || LabelUrlRelationship || TrackUrlRelationship ||

            Alternatively take a look at the definition trees on the MusicBrainz server. ''You must be a RelationshipEditor to change these definitions.''

            || || ["Artist"] || ["Release"] || ["Label"] || ["Track"] ||
            || ["Artist"] || [http://musicbrainz.org/edit/relationships/link_types.html?type=artist-artist Artist—Artist] || - || - || - ||
            || ["Release"] || [http://musicbrainz.org/edit/relationships/link_types.html?type=album-artist Release—Artist] || [http://musicbrainz.org/edit/relationships/link_types.html?type=album-album Release—Release] || - || - ||
            || ["Label"] || [http://musicbrainz.org/edit/relationships/link_types.html?type=artist-label Artist-Label] || [http://musicbrainz.org/edit/relationships/link_types.html?type=album-label Release—Label] || [http://musicbrainz.org/edit/relationships/link_types.html?type=label-label Label-Label] || - ||
            || ["Track"] || [http://musicbrainz.org/edit/relationships/link_types.html?type=artist-track Artist—Track] || [http://musicbrainz.org/edit/relationships/link_types.html?type=album-track Release—Track] || [http://musicbrainz.org/edit/relationships/link_types.html?type=label-track Label—Track] || [http://musicbrainz.org/edit/relationships/link_types.html?type=track-track Track—Track] ||
            || ["URL"] || [http://musicbrainz.org/edit/relationships/link_types.html?type=artist-url Artist—URL] || [http://musicbrainz.org/edit/relationships/link_types.html?type=album-url Release—URL] || [http://musicbrainz.org/edit/relationships/link_types.html?type=label-url Label—URL] || [http://musicbrainz.org/edit/relationships/link_types.html?type=track-url Track—URL] ||

            h2. All official relationship types

            See "AdvancedRelationshipType":http://musicbrainz.org/doc/AdvancedRelationshipType

        usage:          |
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).
            
        
  - name:               'MusicBrainz Statistics'
    is_collection:        true
    tags:               >-
        

    notes:
        usage_overview:           |
            
            Every night certain measurements are taken and stored in the
            statistics tables. These statistics are used to generate the
            [http://musicbrainz.org/stats.html database statistics
            page]. Originally there was just the '''stats''' table - it tracked
            (for each day) a count of how many artists, releases, tracks, disc
            IDs, TRMs, edits, votes and editors were stored in the database.

            These days however the '''stats''' table is not used anymore - it
            has been superseded by the '''currentstat''' and
            '''historicalstat''' tables. Each night various measurements are
            taken, and those counts are stored in both tables -
            '''currentstat''' just stores the most up-to-date value of each
            measurement, and '''historicalstat''' stores all the point-in-time
            measurements for historical and analytic purposes. Each stat has a
            textual "key" (e.g. "count.album.has_discid" is how many releases
            there are with at least one DiscID attributed to). See
            [http://bugs.musicbrainz.org/browser/mb_server/trunk/cgi-bin/Statistic.pm
            Statistic.pm] for more details on what stats we keep, and which keys
            they are stored under.
            
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).

            attachment:statistics.png
        
        
  - name:               'MusicBrainz Moderations'
    is_collection:        true
    tags:               
        
    notes:
        usage_overview:           |
            Tracks changes to the database; see http://wiki.musicbrainz.org/ModerationTypeHelp
            
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).


            attachment:editing.png

            * [:Editor:Editors] enter edits (no surprises there, we
              hope). Those edits are stored in the '''moderation''' table. The
              {{{moderator}}} column indicates who added the edit, the
              {{{type}}} indicates what type of edit it is (see [:EditType:edit
              types]).
            
            * Several of the columns have vague, fuzzy definitions, but the
              interpretation of their contents is really governed by first
              looking at the {{{type}}}.  Each edit type has a "handler" (see
              the
              [http://bugs.musicbrainz.org/browser/mb_server/trunk/cgi-bin/MusicBrainz/Server/Moderation/
              MusicBrainz::Server::Moderation::* modules]) which determines how
              the data required for this edit type needs to be stored in these
              columns, and how data, once it is extracted from them again
              should be handled.  The "fuzzy" columns, and what is usually
              stored in them, are:

             * {{{artist}}} - the artist this edit is attributed to (though
               this is a bit of a grey area; some edits affect more than one
               artist, and maybe some do not really belong to any artist at
               all. Nevertheless, an artist ID is chosen and stored in the
               {{{artist}}} column).
             
             * {{{tab}}} - the table being modified (e.g. artist, track etc.)
             
             * {{{col}}} - the column within that table being modified (e.g. name)
             
             * {{{rowid}}} - the primary key value of the row (in {{{tab}}}) being changed
             
             * {{{prevvalue}}} - the previous value of the column in {{{tab}}},
               or a packed string which holds the necessary data to undo the
               edit once it is voted down.
             
             * {{{newvalue}}} - the new value of the column in tab, or a packed
               string which holds the necessary data to apply the edit onces it
               is voted in.

               ''In practice, {{{prevvalue}}} is often unused and
               {{{newvalue}}} often contains a whole series of data items
               relevant to the edit.''

               The {{{status}}} column describes the status of the moderation
               (see the
               [http://bugs.musicbrainz.org/browser/mb_server/trunk/cgi-bin/ModDefs.pm
               ModDefs::STATUS_* constants]) - for example "Open", "Deleted",
               "Applied", "Failed vote" etc.  The columns {{{yesvotes}}} and
               {{{novotes}}} count the number of "yes" and "no" votes for this
               moderation, respectively. The column {{{depmod}}} is meant to
               indicate the ID of another edit on which this one depends, but
               this is generally unreliable and is being phased out. The column
               {{{automod}}} indicates whether this edit was automatically
               applied (i.e. was never put to the vote first). Finally
               {{{opentime}}} is when the edit was entered into the system,
               {{{expiretime}}} is the time at which voting closes (assuming
               votes have been cast), and {{{closetime}}} (which starts out as
               NULL) is the time at which the edit was actually closed
               (i.e. either applied or rejected).

            * The other two tables are rather simpler.  '''moderationnote'''
              stores notes entered against edits (the editor who entered the
              note, the text of the note, and which edit it is
              for). '''votes''' stores each vote cast on each edit - who voted,
              on which edit, what their vote was (yes / no / abstain), and at
              what time they voted.


  - name:               'MusicBrainz Editors'
    is_collection:        true
    tags:               

    notes:
        usage_overview:           |
            An editor is a user who contributes edits into the MusicBrainz Database.
            
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).

            attachment:editors.png

            * [:Editor:Editors]' (i.e. registered users') details are stored in
              the '''moderator''' table. The main things of interest are the ID,
              login name, password, and e-mail address.  Each editor can also
              store their preferences for various things, such as their
              preferred date/time display format, their time zone and numerous
              other preferences. Such information is held in the
              '''moderator_preference''' table, where each preference simply as
              a textual "key", and a textual "value" (although the
              interpretation of that value isn't specified here; for example,
              for some preferences, it might be a number).
            
            * Moderators can also "subscribe" to artists, which means that they
              get sent an e-mail in regular intervals when one of their
              subscribed artists has new edits against them (if no new edits
              have been entered for their artists, then no e-mail is sent). For
              each artist to which an editor subscribes, a row is added to the
              '''moderator_subscribe_artist''' table. Each row includes the last
              EditID which was processed by the subscription system for this
              editor/artist pair - in other words, only moderations after this
              "lastmodsent" will be considered.  "lastmodsent" is updated each
              time the subscription process runs.  Finally, if one of an editors
              subscribed artists is deleted, or merged into another artist, then
              the "mergedbymod" or "deletedbymod" values are used; when the
              subscription process next runs, the user is told that one of their
              subscribed artists has been removed, and is given a link to the
              moderation which did it.  Then, the
              {{{moderator_subscribe_artist}}} row is removed.
        
        
- infochimps_schema_segment:
    name:               MusicBrainz Search
    is_collection:        true
    tags:               

    notes:
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).

            attachment:search-tables.png

            * Each of the search indexes for [:DatabaseSchema/Artists:artists],
              [:DatabaseSchema/Releases:releases] and
              [:DatabaseSchema/Tracks:tracks] works exactly the same way (err,
              almost. See below).  We will just consider tracks for now, to keep
              things simple.  The name of track is read in and "tokenized" -
              broadly speaking this means that it has its accents removed, is
              converted to lower case, then split up into separate words.
            
            * To store a single track's name in the search index, each word is
              either looked up in the '''wordlist''' table, or it is added
              there.  Then a row is added to the '''trackwords''' table for each
              word in the tokenized name.
            
            * Releases are dealt with in exactly the same way as tracks. Artists
              are only fractionally different, in that the aliases for each
              artist are indexed too. (The words used in the alias link back to
              the main artist record).
            
            * Finally, from time to time (currently it's once a week) the number
              of times each word (in '''wordlist''') is used by artists,
              releases, and tracks is counted, and the results stored in the
              {{{artistusecount}}}, {{{albumusecount}}} and {{{trackusecount}}}
              columns.  This is used to optimize the search function, by looking
              for the less common words first, then successively filtering on
              the more common words.
            
        
        
  - name:               'MusicBrainz TRM (Unique Acoustic Fingerprints) for Musical Tracks'
    is_collection:        true
    tags:               >-
        
    notes:
        usage_overview:           |
            
        usage:          |
            
            See "Collection Schema":collection_schema note in this document (or
            better yet the original
            "DatabaseSchema":http://musicbrainz.org/doc/DatabaseSchema from
            which it's drawn) for an overview of the MusicBrainz Database and
            links to pages which describe each parts of the schema in more
            detail (like this page).

            attachment:trms.png

            * TRMs identify tracks.  Each time a new ["TRM"] is submitted to the
              server, it is looked up in the '''trm''' table. If it is not
              there, then it is added. Each TRM submission also includes the
              version string of the client software submitting it. Those version
              strings are stored in {{{clientversion}}}, and each TRM is linked
              to the client version which (first) submitted it.
            
            * Whenever a new association between a track and a TRM is submitted,
              the relevant row is added to the '''trmjoin''' table (if it is not
              already there). Finally, whenever a TRM lookup is performed, the
              {{{lookupcount}}} value is incremented for that trm.

