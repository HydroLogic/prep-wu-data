<?xml version="1.0" encoding="UTF-8"?>
<!-- Value between [] brackets, for example [#FFFFFF] shows default value which is used if this parameter is not set -->
<!-- This means, that if you are happy with this value, you can delete this line at all and reduce file size -->
<!-- value or explanation between () brackets shows the range or type of values you should use for this parameter -->
<!-- the top left corner has coordinates x = 0, y = 0                                                                -->
<!-- "!" before x or y position (for example: <x>!20</x>) means that the coordinate will be calculated from the right side or the bottom -->
<settings> 
    
  <column>
    <type></type>                                             <!-- [clustered] (clustered, stacked, 100% stacked, 3d column) -->
    <width>100</width>                                         <!-- [80] (0 - 100) width of column (in percents)  -->
    <spacing>0</spacing>                                      <!-- [5] (Number) space between columns of one category axis value, in pixels. Negative values can be used. -->
    <grow_time>0</grow_time>                                  <!-- [0] (Number) grow time in seconds. Leave 0 to appear instantly -->
    <grow_effect></grow_effect>                               <!-- [elastic] (elastic, regular, strong) -->
    <sequenced_grow>true</sequenced_grow>                     <!-- [false] (true / false) whether columns should grow at the same time or one after another -->    
    <alpha></alpha>                                           <!-- [100] (Number) alpha of all columns -->
    <border_color></border_color>                             <!-- [#FFFFFF] (hex color code) -->
    <border_alpha>0</border_alpha>                             <!-- [0] (Number) -->
    <data_labels>
      <![CDATA[]]>                                            <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
    </data_labels>
    <data_labels_text_color></data_labels_text_color>         <!-- [text_color] (hex color code) --> 
    <data_labels_text_size></data_labels_text_size>           <!-- [text_size] (Number) -->
    <data_labels_position></data_labels_position>             <!-- [] (inside, outside, above). This setting is only for clustered chart. --> 
                                                              <!-- if you set "above" for column chart, the data label will be displayed inside column, rotated  by 90 degrees -->
    <balloon_text>                                                    
     <![CDATA[]]>                                             <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
    </balloon_text>    
    <link_target></link_target>                               <!-- [] (_blank, _top ...) -->
    <gradient></gradient>                                     <!-- [vertical] (horizontal / vertical) Direction of column gradient. Gradient colors are defined in graph settings below. -->
    <bullet_offset></bullet_offset>                           <!-- [0] (Number) distance from column / bar to the bullet -->
    <hover_brightness>30</hover_brightness>                   <!-- [0] (from -255 to 255) The column may darken/lighten when the use rolls over it. The intensity may be set here -->                         
  </column>
  
  <!-- <line>                                                       -->  <!-- Here are general settings for "line" graph type. You can set most of these settings for individual lines in graph settings below -->                                                                                                                                                 
  <!--   <connect></connect>                                        -->  <!-- [false] (true / false) whether to connect points if data is missing -->                                                                                                                                                                                                              
  <!--   <width></width>                                            -->  <!-- [2] (Number) line width -->                                                                                                                                                                                                                                                          
  <!--   <alpha></alpha>                                            -->  <!-- [100] (Number) line alpha -->                                                                                                                                                                                                                                                        
  <!--   <fill_alpha></fill_alpha>                                  -->  <!-- [0] (Number) fill alpha -->                                                                                                                                                                                                                                                          
  <!--   <bullet></bullet>                                          -->  <!-- [] (square, round, square_outlined, round_outlined, square_outline, round_outline, filename.swf) can be used predefined bullets or loaded custom bullets. Leave empty if you don't want to have bullets at all. Outlined bullets use plot area color for outline color -->           
  <!--   <bullet_size></bullet_size>                                -->  <!-- [8] (Number) bullet size -->                                                                                                                                                                                                                                                         
  <!--   <data_labels> -->                                                                                                                                                                                                                                                                                                                                         
  <!--      <![CDATA[]]>                                            -->  <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->                                                       
  <!--   </data_labels> -->                                                                                                                                                                                                                                                                                                                                        
  <!--   <data_labels_text_color></data_labels_text_color>          -->  <!-- [text_color] (hex color code) -->                                                                                                                                                                                                                                                    
  <!--   <data_labels_text_size></data_labels_text_size>            -->  <!-- [text_size] (Number) -->                                                                                                                                                                                                                                                             
  <!--   <balloon_text>                                             -->                                                                                                                                                                                                                                                                                            
  <!--     <![CDATA[]]>                                             -->  <!-- [] use the same formatting rules as for data labels -->                                                                                                                                                                                                                              
  <!--   </balloon_text>       -->                                                                                                                                                                                                                                                                                                                                 
  <!--   <link_target></link_target>                                -->  <!-- [] (_blank, _top ...) -->                                                                                                                                                                                                                                                            
  <!-- </line> -->


  <legend>                                                    <!-- LEGEND -->
    <enabled>false</enabled>                                  <!-- [true] (true / false) -->
    <x></x>                                                   <!-- [] (Number / Number% / !Number) if empty, will be equal to left margin -->
    <y></y>                                                   <!-- [] (Number / Number% / !Number) if empty, will be below plot area -->
    <width></width>                                           <!-- [] (Number / Number%) if empty, will be equal to plot area width -->
    <max_columns></max_columns>                               <!-- [] (Number) the maximum number of columns in the legend -->    
    <color></color>                                           <!-- [#FFFFFF] (hex color code) background color. Separate color codes with comas for gradient -->
    <alpha></alpha>                                           <!-- [0] (0 - 100) background alpha -->
    <border_color></border_color>                             <!-- [#000000] (hex color code) border color -->
    <border_alpha></border_alpha>                             <!-- [0] (0 - 100) border alpha -->
    <text_color></text_color>                                 <!-- [text_color] (hex color code) -->   
    <text_size></text_size>                                   <!-- [text_size] (Number) -->
    <spacing></spacing>                                       <!-- [10] (Number) vertical and horizontal gap between legend entries -->
    <margins></margins>                                       <!-- [0] (Number) legend margins (space between legend border and legend entries, recommended to use only if legend border is visible or background color is different from chart area background color) -->
    <reverse_order></reverse_order>                           <!-- [false] (true / false) whether to sort legend entries in a reverse order -->        
    <align></align>                                           <!-- [left] (left / center / right) alignment of legend entries -->
    <key>                                                     <!-- KEY (the color box near every legend entry) -->
      <size></size>                                           <!-- [16] (Number) key size-->
      <border_color></border_color>                           <!-- [] (hex color code) leave empty if you don't want to have border -->
    </key>
  </legend>
  
    
  <values>                                                    <!-- VALUES -->
    <category>                                                <!-- category axis -->
      <enabled>false</enabled>                                     <!-- [true] (true / false) -->
      <frequency>3</frequency>                                <!-- [1] (Number) how often values should be placed -->
      <start_from></start_from>                               <!-- [1] (Number) you can set series from which category values will be displayed -->
      <rotate>45</rotate>                                     <!-- [0] (0 - 90) angle of rotation. If you want to rotate by degree from 1 to 89, you must have font.swf file in fonts folder -->      
      <color></color>                                         <!-- [text_color] (hex color code) -->
      <text_size></text_size>                                 <!-- [text_size] (Number) -->    
      <inside></inside>                                       <!-- [false] (true / false) if set to true, axis values will be displayed inside plot area. This setting will not work for values rotated by 1-89 degrees (0 and 90 only) -->
    </category>
    <value>                                                   <!-- value axis -->
      <enabled>false</enabled>                                 <!-- [true] (true / false) -->
      <reverse></reverse>                                     <!-- [false] (true / false) whether to reverse this axis values or not. If set to true, values will start from biggest number and will end with a smallest number -->    
      <min>-800000</min>                                         <!-- [] (Number) minimum value of this axis. If empty, this value will be calculated automatically. -->
      <max> 800000</max>                                     <!-- [] (Number) maximum value of this axis. If empty, this value will be calculated automatically -->
      <strict_min_max></strict_min_max>                       <!-- [false] (true / false) by default, if your values are bigger then defined max (or smaller then defined min), max and min is changed so that all the chart would fit to chart area. If you don't want this, set this option to true. -->
      <frequency>10</frequency>                                 <!-- [1] (Number) how often values should be placed, 1 - near every gridline, 2 - near every second gridline... -->
      <rotate></rotate>                                       <!-- [0] (0 - 90) angle of rotation. If you want to rotate by degree from 1 to 89, you must have font.swf file in fonts folder -->
      <skip_first></skip_first>                               <!-- [true] (true / false) to skip or not first value -->
      <skip_last></skip_last>                                 <!-- [false] (true / false) to skip or not last value -->
      <color></color>                                         <!-- [text_color] (hex color code) --> 
      <text_size></text_size>                                 <!-- [text_size] (Number) -->
      <unit></unit>                                           <!-- [] (text) -->
      <unit_position></unit_position>                         <!-- [right] (right / left) -->
      <integers_only></integers_only>                         <!-- [false] (true / false) if set to true, values with decimals will be omitted -->
      <inside></inside>                                       <!-- [false] (true / false) if set to true, axis values will be displayed inside plot area. This setting will not work for values rotated by 1-89 degrees (0 and 90 only) -->                   
    </value>
  </values>
  
  <grid>                                                      <!-- GRID -->
    <category>                                                <!-- category axis grid -->                                                     
      <color></color>                                         <!-- [#000000] (hex color code) -->
      <alpha>0</alpha>                                        <!-- [15] (0 - 100) -->
      <dashed></dashed>                                       <!-- [false](true / false) -->
      <dash_length></dash_length>                             <!-- [5] (Number) -->
    </category>
    <value>                                                   <!-- value axis grid -->      
      <color>#999999</color>                                         <!-- [#000000] (hex color code) -->
      <alpha>15</alpha>                                        <!-- [15] (0 - 100) -->
      <dashed></dashed>                                       <!-- [false] (true / false) -->
      <dash_length></dash_length>                             <!-- [5] (Number) -->
      <approx_count>101</approx_count>                        <!-- [10] (Number) approximate number of gridlines -->
      <fill_color>000000</fill_color>                         <!-- [#FFFFFF] (hex color code) every second area between gridlines will be filled with this color (you will need to set fill_alpha > 0) -->
      <fill_alpha>0</fill_alpha>                              <!-- [0] (0 - 100) opacity of fill -->
    </value>
  </grid>

  <axes>                                                      <!-- axes -->
    <category>                                                <!-- category axis -->
      <color>999999</color>                                   <!-- [#000000] (hex color code) -->
      <alpha>0</alpha>                                        <!-- [100] (0 - 100) -->
      <width>1</width>                                        <!-- [2] (Number) line width, 0 for hairline -->
      <tick_length>0</tick_length>                            <!-- [7] (Number) -->
    </category>
    <value>                                                   <!-- value axis -->
      <color>999999</color>                                   <!-- [#000000] (hex color code) -->
      <alpha>0</alpha>                                       <!-- [100] (0 - 100) -->
      <width>1</width>                                        <!-- [2] (Number) line width, 0 for hairline -->
      <tick_length>7</tick_length>                            <!-- [7] (Number) -->
      <logarithmic>false</logarithmic>                        <!-- [false] (true / false) If set to true, this axis will use logarithmic scale instead of linear -->
    </value>
  </axes>  
  
  <plot_area>                                                 <!-- PLOT AREA (the area between axes) -->
    <color>#eeeeee</color>                                    <!-- [#FFFFFF](hex color code) Separate color codes with comas for gradient -->
    <alpha>0</alpha>                                         <!-- [0] (0 - 100) if you want it to be different than background color, use bigger than 0 value -->
    <border_color></border_color>                             <!-- [#000000] (hex color code) -->                                        
    <border_alpha></border_alpha>                             <!-- [0] (0 - 100) -->                                            
    <margins>                                                 <!-- plot area margins -->
      <left>0</left>                                         <!-- [60](Number) --> 
      <top>20</top>                                            <!-- [60](Number) --> 
      <right>0</right>                                        <!-- [60](Number) -->
      <bottom>0</bottom>                                      <!-- [80](Number) -->
    </margins>
  </plot_area>
   
  <graphs>                                                     <!-- GRAPHS SETTINGS. These settings can also be specified in data file, as attributes of <graph>, in this case you can delete everything from <graphs> to </graphs> (including) -->
    <graph gid="1">                                            <!-- if you are using XML data file, graph "gid" must match graph "gid" in data file -->
      <type>column</type>                                      <!-- [column] (column/line) -->                  
      <title>Endorsements</title>                              <!-- [] (graph title) -->
      <color>B92F2F</color>                                    <!-- [] (hex color code) -->
      <alpha></alpha>                                          <!-- [column.alpha (line.alpha)] (0 - 100) -->
      <data_labels>
        <![CDATA[]]>                                           <!-- [column.data_labels (line.data_labels)] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
      </data_labels>      
      <gradient_fill_colors></gradient_fill_colors>            <!-- [] (hex color codes separated by comas) columns can be filled with gradients. Set any number of colors here. Note, that the legend key will be filled with color value, not with gradient. -->
      <balloon_color></balloon_color>                          <!-- [balloon.color] (hex color code) leave empty to use the same color as graph -->
      <balloon_alpha></balloon_alpha>                          <!-- [balloon.alpha] (0 - 100) -->      
      <balloon_text_color></balloon_text_color>                <!-- [balloon.text_color] (hex color code) -->
      <balloon_text>
        <![CDATA[{description}]]>              <!-- [column(line).balloon.text] ({title} {value} {series} {description} {percents}) You can format any balloon text: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
      </balloon_text>       
      <fill_alpha></fill_alpha>                                <!-- [0] (0 - 100) fill alpha (use it if you want to have area chart) -->
      <width></width>                                          <!-- [2] (Number) line width -->
      <bullet></bullet>                                        <!-- [line.bullet] (round, square, round_outlined, square_outline, round_outline, square_outlined, filename) -->            
      <bullet_size></bullet_size>                              <!-- [line.bullet_size] (Number) bullet size -->
      <bullet_color></bullet_color>                            <!-- [] (hex color code) bullet color. If not defined, line color is used -->
      <visible_in_legend></visible_in_legend>                  <!-- [true] (true / false) whether to show legend entry for this graph or not -->
    </graph>
    <graph gid="2">
      <type>line</type>                                     
      <title>Total</title>                               
      <color></color>                                   
      <alpha></alpha>
      <balloon_text>
        <![CDATA[{value}]]>  <!-- [column(line).balloon.text] ({title} {value} {series} {description} {percents}) You can format any balloon text: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
      </balloon_text>                                         
    </graph>
  </graphs>
  
  <balloon>                                                   <!-- BALLOON -->
    <enabled></enabled>                                       <!-- [true] (true / false) -->
    <color></color>                                           <!-- [] (hex color code) balloon background color. If empty, slightly darker then current column color will be used -->
    <alpha>85</alpha>                                         <!-- [100] (0 - 100) -->
    <text_color></text_color>                                 <!-- [#FFFFFF] (hex color code) -->
    <text_size></text_size>                                   <!-- [text_size] (Number) -->
    <max_width>300</max_width>                                   <!-- [220] (Number) The maximum width of a balloon -->
    <corner_radius></corner_radius>                           <!-- [0] (Number) Corner radius of a balloon. If you set it > 0, the balloon will not display arrow -->
    <border_width></border_width>                             <!-- [0] (Number) -->
    <border_alpha></border_alpha>                             <!-- [balloon.alpha] (Number) -->
    <border_color></border_color>                             <!-- [balloon.color] (hex color code) -->
  </balloon>
    
	
  <type>bar</type>                                         <!-- [column] (column / bar) -->
  <data_type>xml</data_type>                                  <!-- [xml] (xml / csv) -->

  <font>Tahoma</font>                                         <!-- [Arial] (font name) use device fonts, such as Arial, Times New Roman, Tahoma, Verdana... -->
  <text_size></text_size>                                     <!-- [11] (Number) text size of all texts. Every text size can be set individually in the settings below -->
  <text_color></text_color>                                   <!-- [#000000] (hex color code) main text color. Every text color can be set individually in the settings below-->
  <decimals_separator>.</decimals_separator>                   <!-- [,] (string) decimal separator. Note, that this is for displaying data only. Decimals in data xml file must be separated with a dot -->
  <thousands_separator>,</thousands_separator>                 <!-- [ ] (string) thousand separator. use "none" if you don't want to separate -->
  <digits_after_decimal></digits_after_decimal>               <!-- [] (Number) if your value has less digits after decimal then is set here, zeroes will be added -->
  <redraw>true</redraw>                                       <!-- [false] (true / false) if your chart's width or height is set in percents, and redraw is set to true, the chart will be redrawn then screen size changes -->
                                                              <!-- this function is beta, be careful. Legend, buttons labels will not be repositioned if you set your x and y values for these objects -->
  <add_time_stamp>true</add_time_stamp>                       <!-- [false] (true / false) if true, a unique number will be added every time flash loads data. Mainly this feature is useful if you set reload _data_interval -->
  <colors></colors>                                           <!-- [#FF6600,#FCD202,#B0DE09,#0D8ECF,#2A0CD0,#CD0D74,#CC0000,#00CC00,#0000CC,#DDDDDD,#999999,#333333,#990000] Colors of graphs. if the graph color is not set, color from this array will be used -->
</settings>
