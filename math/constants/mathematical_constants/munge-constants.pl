#!/usr/bin/perl -w

use strict;
use IO::File;
use Data::Dumper; $Data::Dumper::Indent = 1;
use XML::Simple qw(:strict);
use XML::Writer;
use Text::CSV_XS;
use IO::File;;
use File::Basename qw{fileparse};

#
# Pulled out all files that weren't !text! !bignumber!
# and pushed all the actual constant values over to the left hand side
#
# so each input file is
#   'stuff that is not a number'
#   'exactly one line with a leading digit and possible - sign then many digits'
#   '...digits only...'
#   'a last line that might have a ";" on the end'
#
#

sub dump_math_constant($$) {
    (my ($shortname, $math_constant)) = @_;
	
    print Dumper($math_constant, $shortname);
    my $xmldecl = qq{<?xml version='1.0' standalone='yes'?>}; # \n<?xml-stylesheet href="math-constant.xsl" type="text/xsl"?>
    my $xmlw = XML::Simple->new(RootName => 'math_constant', KeyAttr=>{}, ForceArray=>[], NoAttr => 1);
    $xmlw->XMLout( $math_constant,      OutputFile => "xml/$shortname.xml" );
}


#
# Usage:
#   for file in *.TXT ; do
#     cat $file | ./munge-constants.pl > headerfooter/$file.head.txt ;
#   done
# 
sub grab_math_constant($$) {
    (my ($infilename,$schema)) = @_;
    my $infile = new IO::File; $infile->open("<$infilename") or die "Crapsticks, can't open $infilename: $!";

    (my ($shortname,$path,$suffix) = fileparse($infilename,qr/\.txt/));
    
    # Setup
    $schema->{shortname} =  $shortname;
    $schema->{title}     .= $shortname;
    $schema->{story}     .= "=== $shortname ===\n\n";
    
    

    # files go HEADER, (first line), DIGITS, LAST
    my $phase      = "HEADER";
    my $digitlines = 0;
    
    # printf "\n%s\n  %s\n%s\n\n", "-"x25, $filename, "-"x25;
    printf "%-30s:\t", $infilename;
    for my $line (<$infile>) {
	$line =~ s/[\x0a\x0d]+$//;  #chomp

	# Save everything that isn't a line of numbers into header.
	if ( ($phase eq "HEADER") && ($line !~ m/^(-?[\d\.]+)[\s\\]*$/o) ) {
	    next if ( $line =~ m/^# (This is|Ceci est|Copyright|http).*#/);
	    $schema->{story}     .= $line;
	    next;
	}
	
	#OK -- got the first number line.  Emit it and move to DIGITS
	if ($phase eq "HEADER") {
	    $phase = "DIGITS";	    
	    print 'h';
	    $digitlines=1;
	    $schema->{payload}     =  $1;
	    next;
	}

	# ... lines with digits only, maybe a \ at end ...
	if ( ($phase eq "DIGITS") && ($line =~ m/^(\d+)\\?$/o) ) {
	    $digitlines++;
	    $schema->{payload}     .= $1;
	    next;
	}

	# ... last line ...
	if ( ($phase eq "DIGITS") && ($line =~ m/^(\d+)[\:\;]?\s*$/o) ) {
	    $phase = "LAST";
	    $schema->{payload}     =  $1;
	    printf " <d x %d>\tl", $digitlines;
	    next;
	}

	if ( (($phase eq "DIGITS") || ($phase eq "LAST")) && ($line =~ m/^\s*$/o)) {
	    print (($phase eq "DIGITS") ? (sprintf " <d x %d>\tw", $digitlines) : ('w'));
	    $phase = "LAST";
	    next;
	}
	    
	warn "In $infilename:\tFucked up line '$line'";
	last;
    }
    if ($phase eq "DIGITS") { printf " <d x %d>\t", $digitlines; }
    dump_math_constant($shortname, $schema);
    print "\n"
}
                     

my $schema_story_template = <<HERE;
Mathematical constant.

Taken from a comprehensive collection of mathematical constants
computed to ridiculous precision; gathered from Simon Plouffe's
"Plouffe's Inverter" site.

HERE


my $schema_contributor_template = <<HERE;
This file from Simon Plouffe's 'Plouffe's Inverter' site,
or the mirror of it at ftp://ftp.sunet.se/pub/Science/constant

It comes with the following notice:

# This is the electronic signature for Plouffe's Inverter        #
# Ceci est la signature Èlectronique pour l'Inverseur de Plouffe #
# Copyright : Simon Plouffe/Plouffe's Inverter (c) 1986.         #
# http://www.lacim.uqam.ca/pi                                    #

HERE

sub newschema() {
    my %schema = (
	"title"		=> "Mathematical Constant from Plouffe's Inverter: ",
	"tags"        	=> "math mathematical mathematics constant number theory long digits plouffe collection precise random",
	"initialrating"	=> "4",
	"contributors"	=> [ ["http://pi.lacim.uqam.ca/", "Simon Plouffe", $schema_contributor_template, "Distributed by"],
			     ["http://infochimp.org/", "Philip (flip) Kromer", "converted to universal formats", "Converted by"],
			    ],
	"fields"		=> [ ["name"    , "Name for this mathematical constant"],
				     ["constant", "Value for the constant, broken across lines (remove all whitespace to reassemble)"],
				    ],
	"story"             => $schema_story_template,
	"story_usage"       => "",
	"story_quality"     => "4 The quality of this data is excellent: it was generated by and has been reviewed by professional mathematical researchers.  "
	    . "However, it is possible that errors have been introduced in the conversion.",
	"see_also"          => "tagged_with:plouffe",
	"coverage"          => "",
	"uploaded_by" 	=> "flip", 	    "lastmod_by" 	=> "flip",	    "approved_by" 	=> "flip",
	"created_at" 	=> "",	 	    "lastmod_at" 	=> "",		    "approved_at" 	=> "",
	"dnloaded_count"	=> 0,
	"rows"		=> 1,
	"cols"		=> 1,
	"size"		=> 0
       );
    return \%schema;
}

for my $filename (@ARGV) {
    &grab_math_constant($filename, &newschema());
}

# Need to cat in from E.txt
