


#
# 1_1   0 head PoS lemma  Fr      Ra      Di
# 1_2  10 head PoS        Fr
# 2_1 160 head PoS lemma  FrSp    RaSp    DiSp +- LLSpWr  FrWr  RaWr  DiWr
# 2_2     head PoS        FrSp*                +- LLSpWr  FrWr
# 2_3     head PoS        FrSp                 +- LLSpWr  FrWr*
# 2_4     head PoS        FrSp                 +- LLSpWr* FrWr
# 3_1 120 head PoS lemma  FrCo    RaCo    DiDe +- LLCoTO  FrTO  RaTO  DiCG
# 3_2 120 head PoS        FrCo                 +- LLCoTO  FrTO
# 4_1     head PoS lemma  FrIm    RaIm    DiIm +- LLImIn  FrIn  RaIn  DiIn
# 4_2     head PoS        FrIm                 +- LLImIn  FrIn
#
#
# Word    = Word type (headword followed by any variant forms) - see pp.4-5
# PoS     = Part of speech (grammatical word class - see pp. 12-13)
# Fr      = Rounded frequency per million word tokens (down to a minimum of 10 occurrences of a lemma per million)- see pp. 5
# Ra      = Range: number of sectors of the corpus (out of a maximum of 100) in which the word occurs
# Di      = Dispersion value (Juilland's D) from a minimum of 0.00 to a maximum of 1.00.
#
# FrSp    = Frequency (per million words) in spoken texts of the BNC
# RaSp    = Range across spoken texts (up to a maximum of 10 sectors of the corpus)
# DiSp    = Dispersion in spoken texts: a value from 0 to 1 (Juilland's D)
# LLSpWr  = Log Likelihood score, indicating distinctiveness, or significance of the difference between the spoken and written language frequencies
# FrWr    = Frequency (per million words) in written texts
# RaWr    = Range across written texts (up to a maximum of 90 sectors of the corpus)
# DiWr    = Dispersion in written texts, a value from 0 to 1 (Juilland's D)
#
# FrCo    = Frequency (per million words) in demographically sampled conversational speech
# RaCo    = Range across conversational speech (maximum of 4 sectors)
# DiCo    = Dispersion (Juilland's D) in demographically sampled conversational speech
# LLCoTO  = Distinctiveness, measured in log likelihood (varying from 0.00 to 1.00)
# FrTO    = Frequency (per million words) in context-governed speech (task-oriented)
# RaTO    = Range across task-oriented speech (maximum of 6 sectors)
# DiCG    = Dispersion (Juilland's D) in context-governed speech (task-oriented)
#
# FrIm    = Frequency in imaginative writing
# RaIm    = Range (0-19 for imaginative writing)
# DiIm    = Dispersion (Juilland's D) in imaginative writing
# LLImIn  = Log Likelihood (measure of distinctiveness)
# FrIn    = Frequency in informative writing
# RaIn    = Range (0-71 for informative writing)
# DiIn    = Dispersion (Juilland's D) in informative writing
#
# Ex:
#
#       main|@  PoS     lemma   freq     Range   disp
# ----------------------------------------------------
#       best    Adv     :       81      100     0.96
#       bet     Verb    %       23      96      0.81
#       @       @       bet     21      93      0.79
#       @       @       bets    0       25      0.80
#       @       @       betting 2       72      0.88
#       better  Adv     :       143     100     0.95
#       Betty   NoP     %       14      90      0.62
#       @       @       Betty   13      90      0.62

# %&'()*+,-./0123456789:;<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
#
# esplanade:~/ics/pool/language/corpora/word_freq_bnc$ time perl -MData::Dumper -e 'use YAML::Syck qw{LoadFile}; $s= LoadFile("word_freq_bnc.yaml");'
#
# real    1m8.978s        user    1m5.965s        sys     0m2.517s        pct     99.27
# esplanade:~/ics/pool/language/corpora/word_freq_bnc$ time ruby -e 'require "YAML"; puts YAML.load(File.open("word_freq_bnc.yaml"))'
#
# list all uncaught entities
# cat ripd/1_1_all_fullalpha.txt | ruby -e 'require "rubygems"; require "htmlentities"; require "YAML"; entity_decoder = HTMLEntities.new;
#   wds={}; STDIN.readlines.map{|l| wd = entity_decoder.decode(l.split("\t")[1]); /(&[^;]+;)/.match(wd).each{|m| wds[m] = 1 }; puts wds.keys.sort.to_yaml'
# list all letters
# cat ripd/1_1_all_fullalpha.txt | ruby -e 'require "rubygems"; require "htmlentities"; require "YAML"; entity_decoder = HTMLEntities.new;
#   wds=""; STDIN.readlines.map{|l| wds += entity_decoder.decode(l.split("\t")[1]) }; ltrs = wds.split(//).uniq.sort; puts ltrs.to_yaml"

# all letters
#
# #$%&'()*+,-./0123456789:;<=> @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] _ abcdefghijklmnopqrstuvwxyz{|} ÄÅÇÉÑÖÜáàâãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¬√ƒ≈ÀŒœ‚
#                             ?                              ^ `                             ~
#
# Not Present:
#    'grave'           0x0060    `                  GRAVE ACCENT
#    'quest'           0x003f,   ?                  QUESTION MARK
#                                ^                  (ascii caret)
#                                ~                  (ascii tilde)
#
#

# uncaught (non-SGML) entities:
#
# These are assumed to be mistakes and have been edited by hand in the source
# file: so the the 'corrected' form appears in the '_orig' slot.  All occured as
# a lone headword, at minimal significance (fr 0 / ra 1 / disp 0), and none of
# them appeared elsewhere (in their 'corrected' form as headword entries)
#
# &eacute';      --  &eacute;'
# &eacute/d;     --  &eacute;/d
# &frac23:oz;    --  &frac23;oz
#
# These have no standard SGML-Unicode mappings, and so we have transformed to
# typographically appropriate unicode code points.  The original (SGML-encoded)
# entry persists, of course, in the :head_orig and :lemma_orig slots.
#
# Entity     BNC Description              Repl.Ent.  Hex   Text  Unicode Description of Repl  As it appears in freq. list
# -----------------------------------------------------------------------------------------------------------------------------------------------------
# &bquo;     normalized begin quote mark  &rdquor;    201c “     LEFT DOUBLE QUOTATION MARK   &bquo;             Fore    :       0       1       0.00
# &ft;       feet indicator               &apos;      0027 '     MODIFIER LETTER APOSTROPHE   (85 occurrences)
# &ins;      inches indicator             &quot;      0022 "     QUOTATION MARK               (115 occurrences)
# &rehy;     maps to soft hyphen          &shy;       00ad ­     SOFT HYPHEN                  (3951 occurrences)
# &shilling; British shilling             &sol;       002f /     SOLIDUS                      (11 occurrences)
# &formula;  mathematical formula         &conint;    222e ∮     CONTOUR INTEGRAL             109&formula;km/h   Uncl    :       0       1       0.00
#                                                                                             92&formula;km/h    Uncl    :       0       1       0.00
# &frac17;   fraction one-seventh                          1/7                                &frac17;           Num     :       0       1       0.00
# &frac19;   fraction one-ninth                            1/9                                &frac19;           Num     :       0       1       0.00
# &frac47;   fraction four-sevenths                        4/7                                4&frac47;          Num     :       0       1       0.00
#
# grep '&frac' ./ripd/1_1_all_fullalpha.txt | wc -l  # => 748


#
# Changes to source files:
#
# egrep '^[^ ]' ripd/[234]_?_????*.txt
# ripd/2_4_spokenwritten_ll.txt:        la        Uncl    43      +       1362.7  2
# ripd/3_1_demogvcg_alpha.txt:          fine        Adj     %       186     4       0.92    -       1.3     196     6       0.90
# ripd/3_1_demogvcg_alpha.txt:          int Uncl    :       135     4       0.68    +       760.4   7       6       0.80
# ripd/3_2_demogvcg_ll.txt:             @@     na      Det     19      +       108.0   1       [[?]]
# ripd/4_1_imagvinform_alpha.txt:       basis    NoC     :       14#     19#     0.90    -       4362.7&&        188#    71      0.95
# ripd/4_1_imagvinform_alpha.txt:       @        @       basis   14      19      0.90    -       4362.7  186     7l      0.95
# ripd/4_1_imagvinform_alpha.txt:       @        @       bases   0#      10#     0.75#   -       &&      2       69#     0.87
# ripd/4_2_imagvinform_ll.txt:          lying       Verb    128     +       2399.4  28
# ripd/4_2_imagvinform_ll.txt:          I.  Pron    10      +       410.0   1
# ripd/4_2_imagvinform_ll.txt:          Nato        NoP     2       -       396.2   20
